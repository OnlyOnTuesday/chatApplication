
* todo
** TODO finish creating chat frontend
*** DONE analyze what needs to be done 
    CLOSED: [2018-09-15 Sat 22:39]
** DONE understand polymorphism (can I implement it)
   CLOSED: [2018-09-19 Wed 22:43]
** DONE understand model-view-controlled (can I implement it)
   CLOSED: [2018-09-25 Tue 22:02]
*** DONE fix bugs left in mvc example
    CLOSED: [2018-09-28 Fri 12:32]
**** DONE separate view from model, only contact should be controller
     CLOSED: [2018-09-25 Tue 22:02]
**** DONE figure out the whole mess with pointers and references
     CLOSED: [2018-09-25 Tue 22:02]
** TODO make org file for normal stuff (i.e. homework), set it to open at annoying times 
** DONE read and understand poco documentation
   CLOSED: [2018-10-06 Sat 15:28]
*** TODO understand network/websocket api
*** TODO understand json api (read from memory, or only from file?)
** DONE understand connectToServer
   CLOSED: [2018-10-06 Sat 15:28]
* C++ Frontend Analysis
** Client 
*** did I connect to the server correctly
*** can I read json correctly (from memory)
** Class
*** need abstract class for the guis
**** qt and ncurses
*** maybe need class for normal things (I think so)

** Model View Controller
*** Model
**** Handles data, does not care how it is represented, simply receives and sends it.
**** Independent of View and Controller
*** View 
**** Knows how to present data to user
**** needs access to Model and to define 'Render' function
*** Controller
**** Takes input from user and sends to other two
**** asks model to update data or view to update look
*** example
* Node backend analysis
does anything else need to be added?
** TODO check up on security of server
** TODO check quality of middleware for server 

* Model View Controller specific
** Model
*** needs to set/get username
*** set/get users present?
*** set/get message
**** set message text to blank after
*** set/get history?
*** Needs to be able to talk to server
**** different class for network
***** set/get information 
** View 
*** display message box 
*** display username input
*** display received messages
*** display users present
** Controller
*** send username to model
*** send messages to user
*** send username to view
*** send messages to view 
*** perform any other event handlers
** Network 
*** needs to know when new user joins, alert (model/controller)
*** needs to (read/access) configuration
**** get address, port, uri
*** 

* Plan
when new user joins, add names to array, increase count of users present
Model alerted to new users by network class
When server receives username, name is sent to all clients. Clients must add name to vector
Client will know based off of json tags, who is a user vs other stuff, like messages
                                                                                                      

* Client.h** parse json tags to determine what is message, user, etc
*** if message: pass to model with get message method
*** if new user: pass to model with get new user method
** connect to server
*** handle errors
**** if json doesn't have correct keys/values: print entire json to error file
*** send disconnect


* guiFactory.h
** virtual or override functions?
*** virtual functions that use the override keyword
** what methods will I need 
*** does the scrolling in ncurses need to be done manually?
*** print message to window
**** needs message as input, taken from controller how?
**** does input need to be pointer to string? (probably)
**** what will this return
*** print new user to window
**** needs user as string as input, taken from controller how?
**** input probably needs to be passed as and taken as pointer.
**** what will this return
*** maybe add more later
**** Get the data types for each method 

view also needs to accept a window as input, for waddwstr

the model takes in information from both the controller and from the network class (part of controller? kinda.)
how do I get that info from the model to the view using the controller. That'll be written in the .cpp file for the gui,
right now I just need to figure out what type of information the view class will accept as input.

Okay, so the get method for a message takes a tuple containing the content and user, returns it.  The view 
needs to unpackage the tuple and print it (maybe not unpackage, just use indexes, remove tuple)

**** New Pargraph 
The ui factory class should not be the way it is. Requires everything (name, return, params, etc) to match; impractical
for what we're trying to do.  Need to find a way to do it differently. Review what a factory class is.

Abstract Factory method:
create an abstract class for the general design(ui), then an abstract class for each specific design(ncurses, gtk), 
then a concrete class for the widgets themselves.

^***

* Deadline today
** DONE finish client.h
   CLOSED: [2018-10-06 Sat 15:27]
** DONE rename to network.h
   CLOSED: [2018-10-06 Sat 15:27]
** TODO begin testing network.h with virtual network
** TODO Design factory method for gui, work on ncurses version

client needs to send all messages to model
Model needs to distinguish between local user message (to be sent) and remote user message (to be printed)


if type is message, set a tuple with name and message, pass to setRemoteUserMessage
change setRemoteUserMessage to accept tuple of strings
push into vector of tuples


use stringify to print entire object to error file
needs ostream, put ostream in file?
